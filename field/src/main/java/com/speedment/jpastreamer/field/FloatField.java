/*
 *
 * Copyright (c) 2006-2020, Speedment, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); You may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.speedment.jpastreamer.field;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.jpastreamer.field.trait.HasAttributeConverterClass;
import com.speedment.jpastreamer.field.trait.HasComparableOperators;
import com.speedment.jpastreamer.field.trait.HasFloatValue;
import com.speedment.runtime.compute.ToFloat;
import com.speedment.jpastreamer.field.comparator.FloatFieldComparator;
import com.speedment.jpastreamer.field.internal.FloatFieldImpl;
import com.speedment.jpastreamer.field.method.FloatGetter;

import javax.persistence.AttributeConverter;

/**
 * A field that represents a primitive {@code float} value.
 * <p>
 * Generated by com.speedment.sources.pattern.FieldPattern.
 * 
 * @param <ENTITY> entity type
 * @param <D>      database type
 * 
 * @author Emil Forslund
 * @since  3.0.0
 */
@GeneratedCode(value = "Speedment")
public interface FloatField<ENTITY, D> extends
        Field<ENTITY>,
        HasFloatValue<ENTITY, D>,
        HasComparableOperators<ENTITY, Float>,
        ToFloat<ENTITY>,
        FloatFieldComparator<ENTITY, D>,
        HasAttributeConverterClass<Float, D>
{
    
    /**
     * Creates a new {@link FloatField} using the default implementation.
     * 
     * @param <ENTITY>   entity type
     * @param <D>        database type
     * @param table      the field that this field belongs to
     * @param getter     method reference to getter in entity
     * @param attributeConverterClass the attribute converter class
     * @param unique     if column only contains unique values
     * @return           the created field
     */
    static <ENTITY, D> FloatField<ENTITY, D> create(
            Class<ENTITY> table,
            FloatGetter<ENTITY> getter,
            Class<? extends AttributeConverter<Float, ? super D>> attributeConverterClass,
            boolean unique) {
        return new FloatFieldImpl<>(
                table, getter, attributeConverterClass, unique
        );
    }
    
    @Override
    default float applyAsFloat(ENTITY entity) {
        return getAsFloat(entity);
    }
    
    @Override
    FloatFieldComparator<ENTITY, D> comparator();
    
    @Override
    default FloatFieldComparator<ENTITY, D> reversed() {
        return comparator().reversed();
    }
    
    @Override
    default FloatField<ENTITY, D> getField() {
        return this;
    }
}
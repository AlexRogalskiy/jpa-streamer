/*
 *
 * Copyright (c) 2006-2020, Speedment, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); You may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.speedment.jpastreamer.field;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.jpastreamer.field.comparator.DoubleFieldComparator;
import com.speedment.jpastreamer.field.internal.DoubleFieldImpl;
import com.speedment.jpastreamer.field.method.DoubleGetter;
import com.speedment.jpastreamer.field.trait.HasAttributeConverterClass;
import com.speedment.jpastreamer.field.trait.HasComparableOperators;
import com.speedment.jpastreamer.field.trait.HasDoubleValue;
import com.speedment.runtime.compute.ToDouble;

import javax.persistence.AttributeConverter;

/**
 * A field that represents a primitive {@code double} value.
 * <p>
 * Generated by com.speedment.sources.pattern.FieldPattern.
 * 
 * @param <ENTITY> entity type
 * @param <D>      database type
 * 
 * @author Emil Forslund
 * @since  3.0.0
 */
@GeneratedCode(value = "Speedment")
public interface DoubleField<ENTITY, D> extends Field<ENTITY>,
        HasDoubleValue<ENTITY, D>,
        HasComparableOperators<ENTITY, Double>,
        ToDouble<ENTITY>,
        DoubleFieldComparator<ENTITY, D>,
        HasAttributeConverterClass<Double, D>
{

    /**
     * Creates a new {@link DoubleField} using the default implementation.
     * 
     * @param <ENTITY>   entity type
     * @param <D>        database type
     * @param table      the table that the field belongs to
     * @param columnName the name of the database column the field represents
     * @param getter     method reference to getter in entity
     * @param attributeConverterClass the attribute converter class
     * @param unique     if column only contains unique values
     * @return           the created field
     */
    static <ENTITY, D> DoubleField<ENTITY, D> create(
            Class<ENTITY> table,
            String columnName,
            DoubleGetter<ENTITY> getter,
            Class<? extends AttributeConverter<Double, ? super D>> attributeConverterClass,
            boolean unique) {
        return new DoubleFieldImpl<>(
                table, columnName, getter, attributeConverterClass, unique
        );
    }
    
    @Override
    default double applyAsDouble(ENTITY entity) {
        return getAsDouble(entity);
    }
    
    @Override
    DoubleFieldComparator<ENTITY, D> comparator();
    
    @Override
    default DoubleFieldComparator<ENTITY, D> reversed() {
        return comparator().reversed();
    }
    
    @Override
    default DoubleField<ENTITY, D> getField() {
        return this;
    }
}
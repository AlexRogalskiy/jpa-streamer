{{!
    JPAstreamer - Express JPA queries with Java Streams
    Copyright (c) 2020-2022, Speedment, Inc. All Rights Reserved.

    License: GNU Lesser General Public License (LGPL), version 2.1 or later.

    This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Lesser General Public License for more details.

    See: https://github.com/speedment/jpa-streamer/blob/master/LICENSE
}}
<html>
<head>
  <meta charset="utf-8">
  <title>Mocha Tests</title>
  <link href="/test/env/mocha.css" rel="stylesheet" />
</head>
<body>
  <div id="mocha"></div>

  <script src="/test/env/mocha.js"></script>
  <script src="/test/env/chai.js"></script>
  <script src="/lunr.js"></script>

  <script>
    mocha.setup('tdd')
    window.assert = chai.assert

    window.withFixture = function (name, fn) {
      var fixturePath = '/test/fixtures/' + name,
          xhr = new XMLHttpRequest

      xhr.addEventListener('load', function () {
        if (this.status != 200) {
          fn('non 200 response')
        } else {
          fn(null, this.responseText)
        }
      })

      xhr.open('GET', fixturePath)
      xhr.send()
    }
  </script>
  {{#test_files}}
  <script src="/{{{.}}}"></script>
  {{/test_files}}
  <script>
    mocha.checkLeaks();
    mocha.globals(['lunr']);
    mocha.run();
  </script>
</body>
</html>
